import 'dotenv/config';
import { google } from 'googleapis';
import { getGoogleAuth } from '../google/auth.js';

interface AlgorithmRule {
  ruleId: string;
  block: string;
  metric: string;
  conditionType: string;
  conditionParams: string;
  actionType: string;
  actionParams: string;
  severity: string;
  autoApply: string;
  active: string;
  notes: string;
}

const STARTER_RULES: AlgorithmRule[] = [
  {
    ruleId: 'R001',
    block: 'funnel',
    metric: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É, %',
    conditionType: 'ratio',
    conditionParams: '{"baseline":"rolling_7d","drop_pct":0.15,"min_samples":5}',
    actionType: 'price_adjust',
    actionParams: '{"competitor_scan":"on","target_delta_pct":"match_top3-1%","floor_margin_pct":12}',
    severity: 'high',
    autoApply: 'N',
    active: 'Y',
    notes: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Node.js'
  },
  {
    ruleId: 'R002',
    block: 'ads',
    metric: 'CTR',
    conditionType: 'ratio',
    conditionParams: '{"baseline":"rolling_7d","drop_pct":0.2,"min_samples":5}',
    actionType: 'content_ticket',
    actionParams: '{"task":"replace_main_image","priority":"high","assignee":"content_manager"}',
    severity: 'medium',
    autoApply: 'N',
    active: 'Y',
    notes: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Node.js'
  },
  {
    ruleId: 'R003',
    block: 'funnel',
    metric: '–ü–µ—Ä–µ—Ö–æ–¥—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É',
    conditionType: 'ratio',
    conditionParams: '{"baseline":"rolling_7d","drop_pct":0.2,"min_samples":5}',
    actionType: 'ads_bid_adjust',
    actionParams: '{"target":"clicks","delta":"-10% to +10%","guard":"acos<=0.3"}',
    severity: 'medium',
    autoApply: 'N',
    active: 'Y',
    notes: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Node.js'
  },
  {
    ruleId: 'R004',
    block: 'funnel',
    metric: '–ü–æ–ª–æ–∂–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É',
    conditionType: 'ratio',
    conditionParams: '{"baseline":"rolling_7d","drop_pct":0.15,"min_samples":5}',
    actionType: 'price_adjust',
    actionParams: '{"competitor_scan":"on","target_delta_pct":"match_top3-2%","floor_margin_pct":10}',
    severity: 'high',
    autoApply: 'N',
    active: 'Y',
    notes: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Node.js'
  },
  {
    ruleId: 'R005',
    block: 'funnel',
    metric: 'CR',
    conditionType: 'ratio',
    conditionParams: '{"baseline":"rolling_7d","drop_pct":0.1,"min_samples":5}',
    actionType: 'content_ticket',
    actionParams: '{"task":"review_product_description","priority":"high","assignee":"content_manager"}',
    severity: 'high',
    autoApply: 'N',
    active: 'Y',
    notes: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Node.js'
  },
  {
    ruleId: 'R006',
    block: 'ads',
    metric: '–ü–æ–∫–∞–∑—ã',
    conditionType: 'ratio',
    conditionParams: '{"baseline":"rolling_7d","drop_pct":0.3,"min_samples":5}',
    actionType: 'ads_budget_adjust',
    actionParams: '{"target":"impressions","delta":"+20%","max_budget_increase":5000}',
    severity: 'low',
    autoApply: 'N',
    active: 'Y',
    notes: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Node.js'
  }
];

async function setupAlgorithm() {
  const spreadsheetId = process.env.GOOGLE_SHEETS_ID || '';
  if (!spreadsheetId) throw new Error('Missing GOOGLE_SHEETS_ID');

  const auth = getGoogleAuth();
  const sheets = google.sheets({ version: 'v4', auth });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–∏—Å—Ç Algorithm
    const spreadsheet = await sheets.spreadsheets.get({ spreadsheetId });
    const algorithmSheet = spreadsheet.data.sheets?.find(sheet => 
      sheet.properties?.title === 'Algorithm'
    );

    if (!algorithmSheet) {
      console.log('–°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç Algorithm...');
      await sheets.spreadsheets.batchUpdate({
        spreadsheetId,
        requestBody: {
          requests: [{
            addSheet: {
              properties: {
                title: 'Algorithm',
                gridProperties: { rowCount: 1000, columnCount: 12 }
              }
            }
          }]
        }
      });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = [
      'RuleId', 'Block', 'Metric', 'ConditionType', 'ConditionParams', 
      'ActionType', 'ActionParams', 'Severity', 'AutoApply', 'Active', 
      'CreatedAt', 'Notes'
    ];

    await sheets.spreadsheets.values.update({
      spreadsheetId,
      range: 'Algorithm!A1:L1',
      valueInputOption: 'RAW',
      requestBody: { values: [headers] }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    const existingData = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range: 'Algorithm!A2:L1000'
    });

    const hasExistingData = existingData.data.values && existingData.data.values.length > 0;

    if (hasExistingData) {
      console.log('–í –ª–∏—Å—Ç–µ Algorithm —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª.');
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    const rows = STARTER_RULES.map(rule => [
      rule.ruleId,
      rule.block,
      rule.metric,
      rule.conditionType,
      rule.conditionParams,
      rule.actionType,
      rule.actionParams,
      rule.severity,
      rule.autoApply,
      rule.active,
      new Date().toISOString(),
      rule.notes
    ]);

    await sheets.spreadsheets.values.append({
      spreadsheetId,
      range: 'Algorithm!A:L',
      valueInputOption: 'USER_ENTERED',
      requestBody: { values: rows }
    });

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${STARTER_RULES.length} —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª –≤ –ª–∏—Å—Ç Algorithm`);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Algorithm:', error);
    throw error;
  }
}

async function main() {
  try {
    await setupAlgorithm();
    console.log('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Algorithm –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();

// ========== ENHANCED AI AGENT FOR GOOGLE SHEETS ==========
// –≠—Ç–∞–ø 1: –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π + –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
// –≠—Ç–∞–ø 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏–∑ —Å–æ–∑–≤–æ–Ω–æ–≤
// –≠—Ç–∞–ø 3: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π (–ø–æ –∞–ø—Ä—É–≤—É)

function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('ü§ñ AI –ê–≥–µ–Ω—Ç')
    .addItem('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ö–µ–º—ã', 'setupSchema')
    .addItem('üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã', 'scanSignals')
    .addItem('üìã –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'showSidebar')
    .addItem('‚öôÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞', 'addStarterRules')
    .addItem('üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'setupTriggers')
    .addItem('üìà –°–∞–º–º–∞—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π', 'generateSummary')
    .addToUi();
}

// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
const CONFIG = {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  dataSheetPattern: /^(—è–Ω–≤–∞—Ä—å|—Ñ–µ–≤—Ä–∞–ª—å|–º–∞—Ä—Ç|–∞–ø—Ä–µ–ª—å|–º–∞–π|–∏—é–Ω—å|–∏—é–ª—å|–∞–≤–≥—É—Å—Ç|—Å–µ–Ω—Ç—è–±—Ä—å|–æ–∫—Ç—è–±—Ä—å|–Ω–æ—è–±—Ä—å|–¥–µ–∫–∞–±—Ä—å)\s+\d{4}$/i,
  headerRow: 1,
  metricNameCol: 1, // –∫–æ–ª–æ–Ω–∫–∞ A
  dateStartCol: 3,  // –∫–æ–ª–æ–Ω–∫–∞ C (–¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å C)
  rollingWindowDays: 7,
  minSamplesDefault: 5,
  highlight: { 
    bg: '#fff3cd', 
    notePrefix: 'AI –ê–≥–µ–Ω—Ç: ',
    high: '#ffebee',
    medium: '#fff3e0',
    low: '#e8f5e8'
  }
};

// ========== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –õ–ò–°–¢–û–í ==========
function findDataSheets() {
  const ss = SpreadsheetApp.getActive();
  const sheets = ss.getSheets();
  const dataSheets = [];
  
  sheets.forEach(sheet => {
    const sheetName = sheet.getName();
    if (CONFIG.dataSheetPattern.test(sheetName)) {
      dataSheets.push(sheetName);
    }
  });
  
  return dataSheets;
}

// ========== –ù–ê–°–¢–†–û–ô–ö–ê –°–•–ï–ú–´ ==========
function setupSchema() {
  const ss = SpreadsheetApp.getActive();
  
  // –°–æ–∑–¥–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Å—Ç—ã
  ensureSheetWithHeader(ss, 'Algorithm', [
    'RuleId', 'Block', 'Metric', 'ConditionType', 'ConditionParams', 'ActionType', 'ActionParams', 'Severity', 'AutoApply', 'Active', 'CreatedAt', 'Notes'
  ]);
  
  ensureSheetWithHeader(ss, 'Signals', [
    'Timestamp', 'Block', 'Metric', 'Date', 'CurrentValue', 'BaselineValue', 'DeltaPct', 'RuleId', 'Status', 'LinkToCell', 'Severity'
  ]);
  
  ensureSheetWithHeader(ss, 'Decisions', [
    'SignalId', 'SuggestedActionType', 'ActionParams', 'Rationale', 'Status', 'ApprovedBy', 'AppliedAt', 'AuditLog', 'Confidence'
  ]);
  
  ensureSheetWithHeader(ss, '–ò–∑–º–µ–Ω–µ–Ω–∏—è', [
    'Timestamp', 'Action', 'Description', 'Result', 'User', 'Status'
  ]);
  
  ensureSheetWithHeader(ss, 'Proposals', [
    'CallDate','ExtractedCase','ExistingRuleMatched','SuggestedRuleDiff','Confidence','Status','Notes','RuleId'
  ]);
  
  SpreadsheetApp.getUi().alert('‚úÖ –ì–æ—Ç–æ–≤–æ: —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—Å–µ –ª–∏—Å—Ç—ã —Å—Ö–µ–º—ã');
}

// ========== –°–¢–ê–†–¢–û–í–´–ï –ü–†–ê–í–ò–õ–ê ==========
function addStarterRules() {
  const ss = SpreadsheetApp.getActive();
  const algorithmSheet = ss.getSheetByName('Algorithm');
  if (!algorithmSheet) {
    SpreadsheetApp.getUi().alert('‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—Ö–µ–º—É (–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ö–µ–º—ã)');
    return;
  }
  
  const starterRules = [
    ['R001','funnel','–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É, %','ratio','{"baseline":"rolling_7d","drop_pct":0.15,"min_samples":5}','price_adjust','{"competitor_scan":"on","target_delta_pct":"match_top3-1%","floor_margin_pct":12}','high','N','Y',new Date().toISOString(),'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ'],
    ['R002','ads','CTR','ratio','{"baseline":"rolling_7d","drop_pct":0.2,"min_samples":5}','content_ticket','{"task":"replace_main_image","priority":"high","assignee":"content_manager"}','medium','N','Y',new Date().toISOString(),'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ'],
    ['R003','funnel','–ü–µ—Ä–µ—Ö–æ–¥—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É','ratio','{"baseline":"rolling_7d","drop_pct":0.2,"min_samples":5}','ads_bid_adjust','{"target":"clicks","delta":"-10% to +10%","guard":"acos<=0.3"}','medium','N','Y',new Date().toISOString(),'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ'],
    ['R004','funnel','–ü–æ–ª–æ–∂–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É','ratio','{"baseline":"rolling_7d","drop_pct":0.15,"min_samples":5}','price_adjust','{"competitor_scan":"on","target_delta_pct":"match_top3-2%","floor_margin_pct":10}','high','N','Y',new Date().toISOString(),'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ'],
    ['R005','funnel','CR','ratio','{"baseline":"rolling_7d","drop_pct":0.1,"min_samples":5}','content_ticket','{"task":"review_product_description","priority":"high","assignee":"content_manager"}','high','N','Y',new Date().toISOString(),'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ'],
    ['R006','ads','–ü–æ–∫–∞–∑—ã','ratio','{"baseline":"rolling_7d","drop_pct":0.3,"min_samples":5}','ads_budget_adjust','{"target":"impressions","delta":"+20%","max_budget_increase":5000}','low','N','Y',new Date().toISOString(),'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ']
  ];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª–∞
  const lastRow = algorithmSheet.getLastRow();
  if (lastRow > 1) {
    const response = SpreadsheetApp.getUi().alert(
      '–í–Ω–∏–º–∞–Ω–∏–µ', 
      '–í –ª–∏—Å—Ç–µ Algorithm —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ. –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞?', 
      SpreadsheetApp.getUi().ButtonSet.YES_NO
    );
    if (response !== SpreadsheetApp.getUi().Button.YES) return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
  const startRow = lastRow > 1 ? lastRow + 1 : 2;
  algorithmSheet.getRange(startRow, 1, starterRules.length, starterRules[0].length).setValues(starterRules);
  
  SpreadsheetApp.getUi().alert(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${starterRules.length} —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª`);
}

// ========== –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –°–ò–ì–ù–ê–õ–û–í ==========
function scanSignals() {
  const ss = SpreadsheetApp.getActive();
  const algorithmSheet = ss.getSheetByName('Algorithm');
  const signalsSheet = ss.getSheetByName('Signals');
  const decisionsSheet = ss.getSheetByName('Decisions');
  const changesSheet = ss.getSheetByName('–ò–∑–º–µ–Ω–µ–Ω–∏—è');
  
  if (!algorithmSheet || !signalsSheet || !decisionsSheet) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—Ö–µ–º—É (–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ö–µ–º—ã)');
    return;
  }
  
  const algorithm = readAlgorithm(algorithmSheet);
  if (algorithm.length === 0) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –≤ –ª–∏—Å—Ç–µ Algorithm');
    return;
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –ª–∏—Å—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  const dataSheets = findDataSheets();
  if (dataSheets.length === 0) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (—Ñ–æ—Ä–º–∞—Ç: "–ú–µ—Å—è—Ü –ì–æ–¥")');
    return;
  }
  
  const nowIso = new Date().toISOString();
  let signalsCount = 0;
  let totalSignals = [];
  
  dataSheets.forEach(name => {
    const sheet = ss.getSheetByName(name);
    if (!sheet) return;
    
    const lastDateCol = findLastDateColumn(sheet);
    if (!lastDateCol) return;
    
    const todayDate = sheet.getRange(CONFIG.headerRow, lastDateCol).getValue();
    const baselineCols = rangeBack(lastDateCol - 1, CONFIG.rollingWindowDays, CONFIG.dateStartCol);
    if (baselineCols.length === 0) return;
    
    const lastRow = sheet.getLastRow();
    for (let r = CONFIG.headerRow + 1; r <= lastRow; r++) {
      const metricName = sheet.getRange(r, CONFIG.metricNameCol).getDisplayValue().trim();
      if (!metricName) continue;
      
      const currentValue = toNumberSafe(sheet.getRange(r, lastDateCol).getValue());
      const baselineValues = baselineCols.map(c => toNumberSafe(sheet.getRange(r, c).getValue()))
        .filter(v => isFinite(v));
      
      if (baselineValues.length < CONFIG.minSamplesDefault) continue;
      
      const baseline = avg(baselineValues);
      const deltaPct = computeDeltaPct(currentValue, baseline);
      
      const rule = matchRule(algorithm, metricName, { currentValue, baseline, deltaPct, samples: baselineValues.length });
      if (!rule) continue;
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
      const link = makeA1NotationLink_(ss, sheet, r, lastDateCol);
      const signalId = appendRow_(signalsSheet, [
        nowIso,
        rule.Block,
        metricName,
        formatDate_(todayDate),
        currentValue,
        baseline,
        deltaPct,
        rule.RuleId,
        'new',
        link,
        rule.Severity
      ]);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
      const rationale = `üìâ –ü–∞–¥–µ–Ω–∏–µ –Ω–∞ ${(deltaPct*100).toFixed(1)}% vs ${CONFIG.rollingWindowDays}–¥ –±–∞–∑–∞; –ø—Ä–∞–≤–∏–ª–æ: ${rule.RuleId}`;
      appendRow_(decisionsSheet, [
        signalId,
        rule.ActionType,
        rule.ActionParamsRaw || '',
        rationale,
        'pending',
        '',
        '',
        '',
        0.8 // confidence
      ]);
      
      // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —è—á–µ–π–∫—É
      highlightCellWithNote_(sheet, r, lastDateCol, rule, rationale);
      signalsCount++;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
      totalSignals.push({
        sheet: name,
        metric: metricName,
        value: currentValue,
        baseline: baseline,
        delta: deltaPct,
        rule: rule.RuleId
      });
    }
  });
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∂—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π
  if (changesSheet) {
    const changesDescription = `–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ ${signalsCount} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ª–∏—Å—Ç–∞—Ö: ${dataSheets.join(', ')}. ` +
      `–ò—Å—Ç–æ—á–Ω–∏–∫–∏: ${totalSignals.map(s => `${s.sheet}!${s.metric} (${s.delta.toFixed(1)}%)`).join(', ')}`;
    
    changesSheet.appendRow([
      nowIso,
      '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤',
      changesDescription,
      signalsCount > 0 ? '–ù–∞–π–¥–µ–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è' : '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
      'AI –ê–≥–µ–Ω—Ç',
      '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
    ]);
  }
  
  SpreadsheetApp.getUi().alert(`–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ ${signalsCount} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ ${dataSheets.length} –ª–∏—Å—Ç–∞—Ö`);
}

// ========== –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ ==========
function showSidebar() {
  const html = HtmlService.createHtmlOutput(`
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #4285f4; color: white; padding: 15px; margin: -20px -20px 20px -20px; }
        .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .button { background: #4285f4; color: white; border: none; padding: 10px 15px; border-radius: 3px; cursor: pointer; margin: 5px; }
        .button:hover { background: #3367d6; }
        .button.danger { background: #ea4335; }
        .button.success { background: #34a853; }
        .status { padding: 5px 10px; border-radius: 3px; margin: 5px 0; }
        .status.pending { background: #fff3cd; }
        .status.approved { background: #d4edda; }
        .status.rejected { background: #f8d7da; }
        .metric { font-weight: bold; color: #1a73e8; }
        .action { color: #137333; }
      </style>
    </head>
    <body>
      <div class="header">
        <h2>ü§ñ AI Agent - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
      </div>
      
      <div class="section">
        <h3>üìä –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
        <button class="button" onclick="scanSignals()">–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã</button>
        <button class="button" onclick="refreshData()">–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
        <button class="button" onclick="clearHighlights()">–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫–∏</button>
      </div>
      
      <div class="section">
        <h3>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è (pending)</h3>
        <div id="decisionsList">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
      
      <div class="section">
        <h3>üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Å–æ–∑–≤–æ–Ω–æ–≤</h3>
        <div id="proposalsList">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
      
      <script>
        function scanSignals() {
          google.script.run
            .withSuccessHandler(() => {
              alert('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
              refreshData();
            })
            .withFailureHandler(err => alert('–û—à–∏–±–∫–∞: ' + err.message))
            .scanSignals();
        }
        
        function refreshData() {
          loadDecisions();
          loadProposals();
        }
        
        function loadDecisions() {
          google.script.run
            .withSuccessHandler(displayDecisions)
            .withFailureHandler(err => document.getElementById('decisionsList').innerHTML = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
            .getPendingDecisions();
        }
        
        function loadProposals() {
          google.script.run
            .withSuccessHandler(displayProposals)
            .withFailureHandler(err => document.getElementById('proposalsList').innerHTML = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
            .getPendingProposals();
        }
        
        function displayDecisions(decisions) {
          const html = decisions.length === 0 ? '–ù–µ—Ç pending —Ä–µ—à–µ–Ω–∏–π' : 
            decisions.map(d => \`
              <div class="status pending">
                <div class="metric">\${d.metric}</div>
                <div class="action">\${d.actionType}</div>
                <div>\${d.rationale}</div>
                <button class="button success" onclick="approveDecision('\${d.signalId}')">‚úÖ –û–¥–æ–±—Ä–∏—Ç—å</button>
                <button class="button danger" onclick="rejectDecision('\${d.signalId}')">‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
              </div>
            \`).join('');
          document.getElementById('decisionsList').innerHTML = html;
        }
        
        function displayProposals(proposals) {
          const html = proposals.length === 0 ? '–ù–µ—Ç pending –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π' :
            proposals.map(p => \`
              <div class="status pending">
                <div><strong>\${p.extractedCase}</strong></div>
                <div>Confidence: \${(p.confidence * 100).toFixed(0)}%</div>
                <div>\${p.notes}</div>
                <button class="button success" onclick="acceptProposal('\${p.callDate}')">‚úÖ –ü—Ä–∏–Ω—è—Ç—å</button>
                <button class="button danger" onclick="rejectProposal('\${p.callDate}')">‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
              </div>
            \`).join('');
          document.getElementById('proposalsList').innerHTML = html;
        }
        
        function approveDecision(signalId) {
          google.script.run
            .withSuccessHandler(() => {
              alert('–†–µ—à–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ');
              refreshData();
            })
            .withFailureHandler(err => alert('–û—à–∏–±–∫–∞: ' + err.message))
            .approveDecision(signalId);
        }
        
        function rejectDecision(signalId) {
          google.script.run
            .withSuccessHandler(() => {
              alert('–†–µ—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
              refreshData();
            })
            .withFailureHandler(err => alert('–û—à–∏–±–∫–∞: ' + err.message))
            .rejectDecision(signalId);
        }
        
        function acceptProposal(callDate) {
          google.script.run
            .withSuccessHandler(() => {
              alert('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ');
              refreshData();
            })
            .withFailureHandler(err => alert('–û—à–∏–±–∫–∞: ' + err.message))
            .acceptProposal(callDate);
        }
        
        function rejectProposal(callDate) {
          google.script.run
            .withSuccessHandler(() => {
              alert('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
              refreshData();
            })
            .withFailureHandler(err => alert('–û—à–∏–±–∫–∞: ' + err.message))
            .rejectProposal(callDate);
        }
        
        function clearHighlights() {
          google.script.run
            .withSuccessHandler(() => alert('–ü–æ–¥—Å–≤–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã'))
            .withFailureHandler(err => alert('–û—à–∏–±–∫–∞: ' + err.message))
            .clearAllHighlights();
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        refreshData();
      </script>
    </body>
    </html>
  `)
  .setTitle('AI Agent - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
  .setWidth(400);
  
  SpreadsheetApp.getUi().showSidebar(html);
}

// ========== API –î–õ–Ø –ë–û–ö–û–í–û–ô –ü–ê–ù–ï–õ–ò ==========
function getPendingDecisions() {
  const ss = SpreadsheetApp.getActive();
  const decisionsSheet = ss.getSheetByName('Decisions');
  if (!decisionsSheet) return [];
  
  const values = decisionsSheet.getDataRange().getValues();
  const headers = values.shift() || [];
  const idx = indexMap_(headers);
  
  return values
    .filter(row => row[idx.Status] === 'pending')
    .map(row => ({
      signalId: row[idx.SignalId],
      metric: row[idx.Rationale] ? row[idx.Rationale].split(';')[0] : '',
      actionType: row[idx.SuggestedActionType],
      rationale: row[idx.Rationale]
    }));
}

function getPendingProposals() {
  const ss = SpreadsheetApp.getActive();
  const proposalsSheet = ss.getSheetByName('Proposals');
  if (!proposalsSheet) return [];
  
  const values = proposalsSheet.getDataRange().getValues();
  const headers = values.shift() || [];
  const idx = indexMap_(headers);
  
  return values
    .filter(row => row[idx.Status] === 'pending')
    .map(row => ({
      callDate: row[idx.CallDate],
      extractedCase: row[idx.ExtractedCase],
      confidence: row[idx.Confidence],
      notes: row[idx.Notes]
    }));
}

function approveDecision(signalId) {
  const ss = SpreadsheetApp.getActive();
  const decisionsSheet = ss.getSheetByName('Decisions');
  if (!decisionsSheet) return;
  
  const values = decisionsSheet.getDataRange().getValues();
  const headers = values.shift() || [];
  const idx = indexMap_(headers);
  
  for (let i = 0; i < values.length; i++) {
    if (values[i][idx.SignalId] === signalId) {
      const row = i + 2; // +2 because we removed header
      decisionsSheet.getRange(row, idx.Status + 1).setValue('approved');
      decisionsSheet.getRange(row, idx.ApprovedBy + 1).setValue(Session.getActiveUser().getEmail());
      break;
    }
  }
}

function rejectDecision(signalId) {
  const ss = SpreadsheetApp.getActive();
  const decisionsSheet = ss.getSheetByName('Decisions');
  if (!decisionsSheet) return;
  
  const values = decisionsSheet.getDataRange().getValues();
  const headers = values.shift() || [];
  const idx = indexMap_(headers);
  
  for (let i = 0; i < values.length; i++) {
    if (values[i][idx.SignalId] === signalId) {
      const row = i + 2;
      decisionsSheet.getRange(row, idx.Status + 1).setValue('rejected');
      decisionsSheet.getRange(row, idx.ApprovedBy + 1).setValue(Session.getActiveUser().getEmail());
      break;
    }
  }
}

function acceptProposal(callDate) {
  const ss = SpreadsheetApp.getActive();
  const proposalsSheet = ss.getSheetByName('Proposals');
  const algorithmSheet = ss.getSheetByName('Algorithm');
  if (!proposalsSheet || !algorithmSheet) return;
  
  const values = proposalsSheet.getDataRange().getValues();
  const headers = values.shift() || [];
  const idx = indexMap_(headers);
  
  for (let i = 0; i < values.length; i++) {
    if (values[i][idx.CallDate] === callDate && values[i][idx.Status] === 'pending') {
      const row = i + 2;
      proposalsSheet.getRange(row, idx.Status + 1).setValue('accepted');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –≤ Algorithm
      const newRuleId = 'R' + String(Date.now()).slice(-6);
      const newRule = [
        newRuleId,
        'auto', // Block
        'Auto-generated', // Metric
        'custom', // ConditionType
        values[i][idx.SuggestedRuleDiff], // ConditionParams
        'custom_action', // ActionType
        values[i][idx.SuggestedRuleDiff], // ActionParams
        'medium', // Severity
        'N', // AutoApply
        'Y', // Active
        new Date().toISOString(), // CreatedAt
        `–ò–∑ —Å–æ–∑–≤–æ–Ω–∞ ${callDate}: ${values[i][idx.ExtractedCase]}` // Notes
      ];
      
      algorithmSheet.appendRow(newRule);
      break;
    }
  }
}

function rejectProposal(callDate) {
  const ss = SpreadsheetApp.getActive();
  const proposalsSheet = ss.getSheetByName('Proposals');
  if (!proposalsSheet) return;
  
  const values = proposalsSheet.getDataRange().getValues();
  const headers = values.shift() || [];
  const idx = indexMap_(headers);
  
  for (let i = 0; i < values.length; i++) {
    if (values[i][idx.CallDate] === callDate && values[i][idx.Status] === 'pending') {
      const row = i + 2;
      proposalsSheet.getRange(row, idx.Status + 1).setValue('rejected');
      break;
    }
  }
}

function clearAllHighlights() {
  const ss = SpreadsheetApp.getActive();
  const dataSheets = findDataSheets(); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º findDataSheets()
  dataSheets.forEach(name => {
    const sheet = ss.getSheetByName(name);
    if (sheet) {
      sheet.clearFormat();
      sheet.clearNotes();
    }
  });
}

// ========== –ù–ê–°–¢–†–û–ô–ö–ê –¢–†–ò–ì–ì–ï–†–û–í ==========
function setupTriggers() {
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(trigger => {
    if (trigger.getHandlerFunction() === 'scanSignals') {
      ScriptApp.deleteTrigger(trigger);
    }
  });
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
  ScriptApp.newTrigger('scanSignals')
    .timeBased()
    .everyDays(1)
    .atHour(9)
    .create();
  
  SpreadsheetApp.getUi().alert('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ 9:00');
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
function ensureSheetWithHeader(ss, name, headers) {
  const sheet = ss.getSheetByName(name) || ss.insertSheet(name);
  const firstRow = sheet.getRange(1, 1, 1, headers.length).getValues()[0];
  const needHeaders = firstRow.some(v => !v);
  if (needHeaders) {
    sheet.clear();
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    sheet.setFrozenRows(1);
  }
}

function readAlgorithm(sheet) {
  if (!sheet) return [];
  const values = sheet.getDataRange().getValues();
  const headers = values.shift() || [];
  const idx = indexMap_(headers);
  return values
    .filter(row => String(row[idx.Active] || '').toUpperCase() === 'Y') // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    .map(row => {
      const params = parseJsonSafe_(row[idx.ConditionParams]);
      return {
        RuleId: row[idx.RuleId] || '',
        Block: row[idx.Block] || '',
        Metric: row[idx.Metric] || '',
        ConditionType: (row[idx.ConditionType] || 'ratio').toLowerCase(),
        ConditionParams: params || {},
        ActionType: row[idx.ActionType] || '',
        ActionParamsRaw: row[idx.ActionParams] || '',
        Severity: row[idx.Severity] || 'medium'
      };
    });
}

function matchRule(rules, metricName, context) {
  const candidates = rules.filter(r => r.Metric === metricName);
  for (const r of candidates) {
    if (r.ConditionType === 'ratio') {
      const drop = Math.abs(context.deltaPct);
      const dropPct = numberOr_(r.ConditionParams.drop_pct, 0.15);
      const minSamples = numberOr_(r.ConditionParams.min_samples, CONFIG.minSamplesDefault);
      if (context.samples >= minSamples && context.deltaPct <= -dropPct) {
        return r;
      }
    }
  }
  return null;
}

function findLastDateColumn(sheet) {
  const row = sheet.getRange(CONFIG.headerRow, CONFIG.dateStartCol, 1, sheet.getLastColumn() - CONFIG.dateStartCol + 1).getValues()[0];
  let lastCol = null;
  for (let i = 0; i < row.length; i++) {
    const v = row[i];
    if (v) lastCol = CONFIG.dateStartCol + i;
  }
  return lastCol;
}

function rangeBack(startCol, count, minCol) {
  const cols = [];
  for (let c = startCol; c >= minCol && cols.length < count; c--) cols.push(c);
  return cols;
}

function toNumberSafe(v) {
  if (typeof v === 'number') return v;
  const s = String(v).replace('%','').replace(',','.');
  const n = parseFloat(s);
  return isFinite(n) ? n : NaN;
}

function avg(arr) {
  if (!arr.length) return NaN;
  return arr.reduce((a,b)=>a+b,0) / arr.length;
}

function computeDeltaPct(currentValue, baseline) {
  const denom = Math.abs(baseline) < 1e-9 ? 1e-9 : baseline;
  return (currentValue - baseline) / denom;
}

function indexMap_(headers) {
  const map = {};
  headers.forEach((h, i) => map[h] = i);
  return map;
}

function numberOr_(v, d) {
  const n = typeof v === 'number' ? v : parseFloat(v);
  return isFinite(n) ? n : d;
}

function parseJsonSafe_(raw) {
  try {
    if (!raw) return null;
    return typeof raw === 'string' ? JSON.parse(raw) : raw;
  } catch(e) {
    return null;
  }
}

function appendRow_(sheet, row) {
  sheet.appendRow(row);
  const lastRow = sheet.getLastRow();
  const id = `${sheet.getName()}!R${lastRow}`;
  sheet.getRange(lastRow, 1).setNote(`id=${id}`);
  return id;
}

function highlightCellWithNote_(sheet, r, c, rule, note) {
  const bgColor = CONFIG.highlight[rule.Severity] || CONFIG.highlight.bg;
  sheet.getRange(r, c).setBackground(bgColor);
  const prev = sheet.getRange(r, c).getNote();
  sheet.getRange(r, c).setNote(prev ? (prev + '\n' + note) : note);
}

function makeA1NotationLink_(ss, sheet, r, c) {
  const url = ss.getUrl();
  const gid = sheet.getSheetId();
  const a1 = sheet.getRange(r, c).getA1Notation();
  return `${url}#gid=${gid}&range=${encodeURIComponent(a1)}`;
}

function formatDate_(d) {
  if (!d) return '';
  try {
    if (Object.prototype.toString.call(d) === '[object Date]') return Utilities.formatDate(d, Session.getScriptTimeZone(), 'yyyy-MM-dd');
    const parsed = new Date(d);
    return Utilities.formatDate(parsed, Session.getScriptTimeZone(), 'yyyy-MM-dd');
  } catch(e) {
    return String(d);
  }
}

// ========== –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ê–ú–ú–ê–†–ò ==========
function generateSummary() {
  const ss = SpreadsheetApp.getActive();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
    const signalsSheet = ss.getSheetByName('Signals');
    if (!signalsSheet) {
      SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞', '–õ–∏—Å—Ç "–°–∏–≥–Ω–∞–ª—ã" –Ω–µ –Ω–∞–π–¥–µ–Ω', SpreadsheetApp.getUi().ButtonSet.OK);
      return;
    }
    
    const signalsData = signalsSheet.getDataRange().getValues();
    if (signalsData.length <= 1) {
      SpreadsheetApp.getUi().alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '–°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', SpreadsheetApp.getUi().ButtonSet.OK);
      return;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const now = new Date();
    const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);
    
    const recentSignals = signalsData.slice(1).filter(row => {
      const signalTime = new Date(row[0]);
      return signalTime >= yesterday;
    });
    
    if (recentSignals.length === 0) {
      SpreadsheetApp.getUi().alert('–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤', '–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', SpreadsheetApp.getUi().ButtonSet.OK);
      return;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏
    let summary = '–°–ê–ú–ú–ê–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ô\n\n';
    summary += `–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${now.toLocaleString('ru-RU')}\n`;
    summary += `–ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π: ${recentSignals.length}\n\n`;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–ª–æ–∫–∞–º
    const byBlock = {};
    recentSignals.forEach(signal => {
      const block = signal[1];
      if (!byBlock[block]) byBlock[block] = [];
      byBlock[block].push(signal);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –±–ª–æ–∫–∞–º —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    Object.keys(byBlock).forEach(block => {
      summary += `${block.toUpperCase()}:\n`;
      byBlock[block].forEach(signal => {
        const metric = signal[2];
        const change = signal[6];
        const severity = signal[10];
        const link = signal[9]; // –°—Å—ã–ª–∫–∞ –Ω–∞ —è—á–µ–π–∫—É
        const emoji = severity === '–í—ã—Å–æ–∫–∞—è' ? 'üî¥' : severity === '–°—Ä–µ–¥–Ω—è—è' ? 'üü°' : 'üü¢';
        summary += `  ${emoji} ${metric}: ${change}% (${link})\n`;
      });
      summary += '\n';
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    summary += '–ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:\n';
    const uniqueSheets = [...new Set(recentSignals.map(s => s[9].split('!')[0]))];
    uniqueSheets.forEach(sheet => {
      summary += `- ${sheet}: ${recentSignals.filter(s => s[9].startsWith(sheet)).length} —Å–∏–≥–Ω–∞–ª–æ–≤\n`;
    });
    summary += '\n';
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    summary += '–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n';
    summary += '1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—Å—Ç "–°–∏–≥–Ω–∞–ª—ã" –¥–ª—è –¥–µ—Ç–∞–ª–µ–π\n';
    summary += '2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –ª–∏—Å—Ç–µ "–†–µ—à–µ–Ω–∏—è"\n';
    summary += '3. –û–¥–æ–±—Ä–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n';
    summary += '4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Å—ã–ª–∫–∞–º –≤—ã—à–µ\n';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º–º–∞—Ä–∏
    SpreadsheetApp.getUi().alert('–°–∞–º–º–∞—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π', summary, SpreadsheetApp.getUi().ButtonSet.OK);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–∏—Å—Ç "–ò–∑–º–µ–Ω–µ–Ω–∏—è"
    const changesSheet = ss.getSheetByName('–ò–∑–º–µ–Ω–µ–Ω–∏—è');
    if (changesSheet) {
      changesSheet.appendRow([
        now.toISOString(),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏',
        `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${recentSignals.length} —Å–∏–≥–Ω–∞–ª–æ–≤`,
        '–£—Å–ø–µ—à–Ω–æ',
        'AI –ê–≥–µ–Ω—Ç',
        '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
      ]);
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏:', error);
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏: ' + error.message, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

// ========== –°–û–•–†–ê–ù–Ø–ï–ú –°–¢–ê–†–´–ô –°–ö–†–ò–ü–¢ ==========
function znach2() {
  var spreadsheet = SpreadsheetApp.getActive();
  spreadsheet.getActiveRange().copyTo(spreadsheet.getActiveRange(), SpreadsheetApp.CopyPasteType.PASTE_VALUES, false);
}

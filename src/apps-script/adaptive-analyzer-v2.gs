// ========== –ê–î–ê–ü–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† V2.0 ==========
// –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
// –†–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏ –∫–æ–ª–æ–Ω–∫–∏

// ========== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==========
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('ü§ñ AI –ê–≥–µ–Ω—Ç v2.0')
    .addItem('‚ñ∂Ô∏è –ó–ê–ü–£–°–¢–ò–¢–¨ –ê–ù–ê–õ–ò–ó', 'runSmartAnalysis')
    .addSeparator()
    .addItem('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'showSettings')
    .addItem('üìä –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤', 'showHistory')
    .addItem('‚ùì –ü–æ–º–æ—â—å', 'showHelp')
    .addToUi();
}

// ========== –£–ú–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ ==========

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–ª–æ–Ω–∫—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–∑–∏—Ü–∏–∏)
 */
function findColumn(sheet, keywords, startCol = 1) {
  const lastCol = sheet.getLastColumn();
  const headers = sheet.getRange(1, startCol, 1, lastCol - startCol + 1).getValues()[0];
  
  for (let i = 0; i < headers.length; i++) {
    const header = String(headers[i]).toLowerCase().trim();
    
    if (!header) continue;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ª—é–±—ã–º –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for (const keyword of keywords) {
      if (header.includes(keyword.toLowerCase())) {
        return startCol + i; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏
      }
    }
  }
  
  return null; // –ù–µ –Ω–∞–π–¥–µ–Ω–æ
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–∞–º–∏
 */
function findDateColumns(sheet) {
  const lastCol = sheet.getLastColumn();
  const headers = sheet.getRange(1, 1, 1, lastCol).getValues()[0];
  
  const dateColumns = [];
  const datePattern = /\d{1,2}\.\d{1,2}\.(\d{2}|\d{4})/; // DD.MM.YY –∏–ª–∏ DD.MM.YYYY
  
  for (let i = 0; i < headers.length; i++) {
    const header = String(headers[i]).trim();
    
    if (datePattern.test(header)) {
      // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
      const match = header.match(datePattern);
      const dateStr = match[0];
      
      dateColumns.push({
        col: i + 1,
        dateStr: dateStr,
        header: header
      });
    }
  }
  
  return dateColumns;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –¥–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞—Ç—ã (—Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞)
 */
function findLastTwoDates(dateColumns) {
  if (dateColumns.length < 2) {
    return null;
  }
  
  // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
  const parsed = dateColumns.map(dc => {
    const parts = dc.dateStr.split('.');
    let day = parseInt(parts[0], 10);
    let month = parseInt(parts[1], 10) - 1; // –ú–µ—Å—è—Ü—ã —Å 0
    let year = parseInt(parts[2], 10);
    
    // –ï—Å–ª–∏ –≥–æ–¥ –¥–≤—É–∑–Ω–∞—á–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º 2000
    if (year < 100) {
      year += 2000;
    }
    
    const date = new Date(year, month, day);
    
    return {
      ...dc,
      date: date
    };
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
  parsed.sort((a, b) => a.date - b.date);
  
  // –ë–µ—Ä–µ–º –¥–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ
  const today = parsed[parsed.length - 1];
  const yesterday = parsed[parsed.length - 2];
  
  return {
    today: today,
    yesterday: yesterday
  };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–ª–æ–Ω–∫–µ
 */
function detectColumnType(sheet, colIndex, startRow = 2, sampleSize = 10) {
  const lastRow = Math.min(sheet.getLastRow(), startRow + sampleSize - 1);
  
  if (lastRow < startRow) return 'empty';
  
  const values = sheet.getRange(startRow, colIndex, lastRow - startRow + 1, 1).getValues();
  
  let hasPercent = 0;
  let hasNumbers = 0;
  let hasDates = 0;
  let hasText = 0;
  
  for (const [value] of values) {
    if (!value || value === '') continue;
    
    const str = String(value).trim();
    
    if (str.includes('%')) hasPercent++;
    else if (!isNaN(parseFloat(str.replace(/[\s\xa0,]/g, '')))) hasNumbers++;
    else if (str.match(/\d{1,2}\.\d{1,2}\.(\d{2}|\d{4})/)) hasDates++;
    else hasText++;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —Ç–∏–ø
  const max = Math.max(hasPercent, hasNumbers, hasDates, hasText);
  
  if (max === 0) return 'empty';
  if (max === hasDates) return 'date';
  if (max === hasPercent) return 'percentage';
  if (max === hasNumbers) return 'number';
  
  return 'text';
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
 */
function findDataStartRow(sheet) {
  // –û–±—ã—á–Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å–æ 2-–π –∏–ª–∏ 3-–π —Å—Ç—Ä–æ–∫–∏
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
  
  for (let row = 2; row <= 5; row++) {
    const firstCell = sheet.getRange(row, 1).getValue();
    
    if (firstCell && String(firstCell).trim() !== '') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ "–º–µ—Ç—Ä–∏–∫–∞", "–Ω–∞–∑–≤–∞–Ω–∏–µ" –∏ —Ç.–¥.)
      const str = String(firstCell).toLowerCase();
      
      if (!str.includes('–º–µ—Ç—Ä–∏–∫–∞') && !str.includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') && 
          !str.includes('–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å') && !str.includes('–ø–∞—Ä–∞–º–µ—Ç—Ä')) {
        return row;
      }
    }
  }
  
  return 2; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–∏—Å—Ç–∞
 */
function detectSheetStructure(sheet) {
  Logger.log('–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–∏—Å—Ç–∞: ' + sheet.getName());
  
  const structure = {
    sheetName: sheet.getName(),
    dateColumns: findDateColumns(sheet),
    dataStartRow: findDataStartRow(sheet),
    columns: {}
  };
  
  // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Ç—Ä–∏–∫
  const metricCol = findColumn(sheet, ['–º–µ—Ç—Ä–∏–∫–∞', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ø–∞—Ä–∞–º–µ—Ç—Ä'], 1);
  if (metricCol) {
    structure.columns.metric = metricCol;
  } else {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
    structure.columns.metric = 1;
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –¥–∞—Ç—ã
  if (structure.dateColumns.length >= 2) {
    const dates = findLastTwoDates(structure.dateColumns);
    
    if (dates) {
      structure.todayCol = dates.today.col;
      structure.yesterdayCol = dates.yesterday.col;
      structure.todayDate = dates.today.dateStr;
      structure.yesterdayDate = dates.yesterday.dateStr;
    }
  }
  
  Logger.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: ' + JSON.stringify(structure));
  
  return structure;
}

// ========== –ì–ò–ë–ö–û–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –° –ê–õ–ì–û–†–ò–¢–ú–ê–ú–ò ==========

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ (–≥–∏–±–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ)
 */
function matchMetricToRule(metricName, rules) {
  const metricLower = metricName.toLowerCase().trim();
  
  // 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  for (const rule of rules) {
    if (rule.Metric.toLowerCase().trim() === metricLower) {
      return rule;
    }
  }
  
  // 2. –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const metricKeywords = metricLower.split(/[\s,\-()]+/).filter(w => w.length > 2);
  
  for (const rule of rules) {
    const ruleKeywords = rule.Metric.toLowerCase().split(/[\s,\-()]+/).filter(w => w.length > 2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for (const mk of metricKeywords) {
      for (const rk of ruleKeywords) {
        if (mk === rk || mk.includes(rk) || rk.includes(mk)) {
          return rule;
        }
      }
    }
  }
  
  // 3. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
  const synonyms = {
    'ctr': ['–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å', 'click-through', '–ø–µ—Ä–µ—Ö–æ–¥—ã/–ø–æ–∫–∞–∑—ã'],
    'cr': ['–∫–æ–Ω–≤–µ—Ä—Å–∏—è', 'conversion rate'],
    '–ø–æ–∫–∞–∑—ã': ['impressions', 'views', '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã'],
    '–∫–ª–∏–∫–∏': ['clicks', '–ø–µ—Ä–µ—Ö–æ–¥—ã'],
    '–∫–æ—Ä–∑–∏–Ω–∞': ['cart', 'basket', '–¥–æ–±–∞–≤–ª–µ–Ω–∏—è']
  };
  
  for (const [key, syns] of Object.entries(synonyms)) {
    const hasKeyInMetric = metricLower.includes(key) || syns.some(s => metricLower.includes(s));
    
    if (hasKeyInMetric) {
      // –ò—â–µ–º –ø—Ä–∞–≤–∏–ª–æ —Å —Ç–∞–∫–∏–º –∂–µ –∫–ª—é—á–æ–º –∏–ª–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–º
      for (const rule of rules) {
        const ruleLower = rule.Metric.toLowerCase();
        if (ruleLower.includes(key) || syns.some(s => ruleLower.includes(s))) {
          return rule;
        }
      }
    }
  }
  
  return null; // –ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –ª–∏—Å—Ç–∞ "–ê–ª–≥–æ—Ä–∏—Ç–º"
 */
function loadRules() {
  const ss = SpreadsheetApp.getActive();
  const algorithmSheet = ss.getSheetByName('Algorithm') || ss.getSheetByName('–ê–ª–≥–æ—Ä–∏—Ç–º');
  
  if (!algorithmSheet) {
    Logger.log('–õ–∏—Å—Ç "Algorithm" –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return [];
  }
  
  const data = algorithmSheet.getDataRange().getValues();
  if (data.length <= 1) {
    Logger.log('–ù–µ—Ç –ø—Ä–∞–≤–∏–ª –≤ –ª–∏—Å—Ç–µ "Algorithm"');
    return [];
  }
  
  const headers = data[0];
  const rules = [];
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
  const colMap = {};
  headers.forEach((h, i) => {
    colMap[h] = i;
  });
  
  // –ü–∞—Ä—Å–∏–º –ø—Ä–∞–≤–∏–ª–∞
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const active = String(row[colMap.Active] || '').toUpperCase() === 'Y';
    if (!active) continue;
    
    // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ª–æ–≤–∏—è
    let conditionParams = {};
    try {
      const paramsStr = row[colMap.ConditionParams];
      if (paramsStr) {
        conditionParams = JSON.parse(paramsStr);
      }
    } catch (e) {
      Logger.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∞–≤–∏–ª–∞: ' + e);
    }
    
    const rule = {
      RuleId: row[colMap.RuleId] || '',
      Block: row[colMap.Block] || '',
      Metric: row[colMap.Metric] || '',
      ConditionType: row[colMap.ConditionType] || 'ratio',
      ConditionParams: conditionParams,
      ActionType: row[colMap.ActionType] || '',
      ActionParams: row[colMap.ActionParams] || '',
      Severity: row[colMap.Severity] || 'medium',
      dropPct: conditionParams.drop_pct || 0.15,
      minSamples: conditionParams.min_samples || 5
    };
    
    rules.push(rule);
  }
  
  Logger.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: ' + rules.length);
  return rules;
}

// ========== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê ==========

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
 */
function runSmartAnalysis() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActive();
  
  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    ui.alert('–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞', '–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...', ui.ButtonSet.OK);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
    const rules = loadRules();
    if (rules.length === 0) {
      ui.alert('–û—à–∏–±–∫–∞', '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –ª–∏—Å—Ç–µ "Algorithm"', ui.ButtonSet.OK);
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ª–∏—Å—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    const dataSheetPattern = /^(—è–Ω–≤–∞—Ä—å|—Ñ–µ–≤—Ä–∞–ª—å|–º–∞—Ä—Ç|–∞–ø—Ä–µ–ª—å|–º–∞–π|–∏—é–Ω—å|–∏—é–ª—å|–∞–≤–≥—É—Å—Ç|—Å–µ–Ω—Ç—è–±—Ä—å|–æ–∫—Ç—è–±—Ä—å|–Ω–æ—è–±—Ä—å|–¥–µ–∫–∞–±—Ä—å)\s+\d{4}$/i;
    const sheets = ss.getSheets();
    const dataSheets = sheets.filter(s => dataSheetPattern.test(s.getName()));
    
    if (dataSheets.length === 0) {
      ui.alert('–û—à–∏–±–∫–∞', '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (—Ñ–æ—Ä–º–∞—Ç: "–ú–µ—Å—è—Ü –ì–æ–¥")', ui.ButtonSet.OK);
      return;
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏—Å—Ç
    const sheet = dataSheets[dataSheets.length - 1];
    const structure = detectSheetStructure(sheet);
    
    if (!structure.todayCol || !structure.yesterdayCol) {
      ui.alert('–û—à–∏–±–∫–∞', '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', ui.ButtonSet.OK);
      return;
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const anomalies = [];
    const lastRow = sheet.getLastRow();
    
    for (let row = structure.dataStartRow; row <= lastRow; row++) {
      const metricName = sheet.getRange(row, structure.columns.metric).getDisplayValue().trim();
      
      if (!metricName) continue;
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
      const todayValue = parseNumber(sheet.getRange(row, structure.todayCol).getValue());
      const yesterdayValue = parseNumber(sheet.getRange(row, structure.yesterdayCol).getValue());
      
      if (todayValue === null || yesterdayValue === null) continue;
      if (todayValue === 0 && yesterdayValue === 0) continue;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
      const changePct = yesterdayValue === 0 ? 100 : 
        ((todayValue - yesterdayValue) / Math.abs(yesterdayValue)) * 100;
      
      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
      const rule = matchMetricToRule(metricName, rules);
      
      if (rule) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
        const threshold = rule.dropPct * 100; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        
        if (Math.abs(changePct) >= threshold && changePct < 0) { // –¢–æ–ª—å–∫–æ –ø–∞–¥–µ–Ω–∏—è
          anomalies.push({
            row: row,
            metric: metricName,
            yesterdayValue: yesterdayValue,
            todayValue: todayValue,
            changePct: changePct,
            rule: rule,
            severity: rule.Severity
          });
        }
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (anomalies.length === 0) {
      ui.alert('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ! ‚úÖ', ui.ButtonSet.OK);
    } else {
      showResults(anomalies, structure);
    }
    
  } catch (e) {
    Logger.log('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ' + e);
    ui.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: ' + e.message, ui.ButtonSet.OK);
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
 */
function showResults(anomalies, structure) {
  const ui = SpreadsheetApp.getUi();
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
  const critical = anomalies.filter(a => a.severity === 'high');
  const important = anomalies.filter(a => a.severity === 'medium');
  const normal = anomalies.filter(a => a.severity === 'low');
  
  let message = `üìä –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù\n\n`;
  message += `–õ–∏—Å—Ç: ${structure.sheetName}\n`;
  message += `–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: ${structure.yesterdayDate} vs ${structure.todayDate}\n\n`;
  message += `–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${anomalies.length}\n`;
  message += `‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö: ${critical.length}\n`;
  message += `‚Ä¢ –í–∞–∂–Ω—ã—Ö: ${important.length}\n`;
  message += `‚Ä¢ –û–±—ã—á–Ω—ã—Ö: ${normal.length}\n\n`;
  
  if (critical.length > 0) {
    message += `üî¥ –°–†–û–ß–ù–û (—Ç—Ä–µ–±—É—é—Ç –¥–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è):\n\n`;
    critical.forEach(a => {
      message += `‚Ä¢ ${a.metric}\n`;
      message += `  –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${a.changePct.toFixed(1)}%\n`;
      message += `  –î–µ–π—Å—Ç–≤–∏–µ: ${a.rule.ActionType}\n\n`;
    });
  }
  
  if (important.length > 0) {
    message += `üü° –í–ê–ñ–ù–û (—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è):\n\n`;
    important.slice(0, 3).forEach(a => { // –ü–µ—Ä–≤—ã–µ 3
      message += `‚Ä¢ ${a.metric}: ${a.changePct.toFixed(1)}%\n`;
    });
    
    if (important.length > 3) {
      message += `... –∏ –µ—â–µ ${important.length - 3}\n`;
    }
  }
  
  message += `\n[–î–µ—Ç–∞–ª–∏ –≤ –ª–∏—Å—Ç–µ "–°–∏–≥–Ω–∞–ª—ã"]`;
  
  ui.alert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞', message, ui.ButtonSet.OK);
}

/**
 * –ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏
 */
function parseNumber(value) {
  if (value === null || value === undefined || value === '') return null;
  
  if (typeof value === 'number') return value;
  
  const str = String(value).replace(/[\s\xa0]/g, '').replace(',', '.').replace('%', '');
  const num = parseFloat(str);
  
  return isNaN(num) ? null : num;
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

function showSettings() {
  SpreadsheetApp.getUi().alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', SpreadsheetApp.getUi().ButtonSet.OK);
}

function showHistory() {
  SpreadsheetApp.getUi().alert('–ò—Å—Ç–æ—Ä–∏—è', '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', SpreadsheetApp.getUi().ButtonSet.OK);
}

function showHelp() {
  const message = `ü§ñ AI –ê–ì–ï–ù–¢ V2.0 - –ü–û–ú–û–©–¨\n\n` +
    `–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n` +
    `1. –ù–∞–∂–º–∏—Ç–µ "–ó–ê–ü–£–°–¢–ò–¢–¨ –ê–ù–ê–õ–ò–ó"\n` +
    `2. –ê–≥–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n` +
    `   ‚Ä¢ –ù–∞–π–¥–µ—Ç –ª–∏—Å—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏\n` +
    `   ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n` +
    `   ‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç –≤—á–µ—Ä–∞/—Å–µ–≥–æ–¥–Ω—è\n` +
    `   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç –ø—Ä–∞–≤–∏–ª–∞\n` +
    `   ‚Ä¢ –í—ã–¥–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n` +
    `3. –°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º\n\n` +
    `–ê–≥–µ–Ω—Ç –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –µ—Å–ª–∏ –≤—ã:\n` +
    `‚Ä¢ –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ—Ç–µ –∫–æ–ª–æ–Ω–∫–∏\n` +
    `‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫\n` +
    `‚Ä¢ –î–æ–±–∞–≤–∏—Ç–µ –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏\n\n` +
    `–ì–ª–∞–≤–Ω–æ–µ: —Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –ª–∏—Å—Ç–µ "Algorithm"!`;
  
  SpreadsheetApp.getUi().alert('–ü–æ–º–æ—â—å', message, SpreadsheetApp.getUi().ButtonSet.OK);
}


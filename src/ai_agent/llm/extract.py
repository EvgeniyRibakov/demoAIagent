"""
LLM –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
"""

import json
import re
from typing import List, Dict, Any, Optional
from dataclasses import dataclass

import openai
from ai_agent.config import config


@dataclass
class Proposal:
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞"""
    call_date: str
    extracted_case: str
    existing_rule_matched: bool
    suggested_rule_diff: str
    confidence: float
    status: str = "pending"
    notes: str = ""
    rule_id: str = ""


class LLMExtractor:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ LLM"""
    
    def __init__(self):
        self.client = None
        self._setup_client()
    
    def _setup_client(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç OpenAI"""
        if not config.OPENAI_API_KEY:
            print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        try:
            self.client = openai.OpenAI(api_key=config.OPENAI_API_KEY)
            print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI: {e}")
    
    def _get_prompt(self, transcript: str, algorithm_preview: str = None) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM"""
        
        system_prompt = """–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–≤–æ–Ω–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö.

–ó–∞–¥–∞—á–∞:
1) –ù–∞–π–¥–∏ –∫–µ–π—Å—ã, –≥–¥–µ —Ä–µ—à–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞
2) –û—Ç–¥–µ–ª—å–Ω–æ –Ω–∞–π–¥–∏ –∫–µ–π—Å—ã —Å –Ω–æ–≤—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ
3) –î–ª—è –Ω–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∞–≤–∏–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON

–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ (–ø—Ä–∏–º–µ—Ä—ã):
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è —É–ø–∞–ª–∞ ‚Üí –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ ‚Üí —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É
- CTR —É–ø–∞–ª ‚Üí –∑–∞–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞
- –ü–æ–∫–∞–∑—ã —É–ø–∞–ª–∏ ‚Üí —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç
- –ü–µ—Ä–µ—Ö–æ–¥—ã —É–ø–∞–ª–∏ ‚Üí —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –≤ —Ä–µ–∫–ª–∞–º–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ JSON):
{
  "by_rule": [
    {
      "case": "–æ–ø–∏—Å–∞–Ω–∏–µ –∫–µ–π—Å–∞",
      "rule_type": "—Ç–∏–ø –ø—Ä–∞–≤–∏–ª–∞ (price_adjust, content_ticket, ads_bid_adjust)",
      "confidence": 0.9
    }
  ],
  "new": [
    {
      "case": "–æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–µ–π—Å–∞", 
      "suggested_rule": {
        "condition_type": "ratio",
        "condition_params": {"drop_pct": 0.15, "min_samples": 5},
        "action_type": "new_action",
        "action_params": {"param1": "value1"},
        "severity": "high"
      },
      "confidence": 0.8,
      "rationale": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞"
    }
  ]
}"""

        user_prompt = f"""
–¢–†–ê–ù–°–ö–†–ò–ü–¢ –°–û–ó–í–û–ù–ê:
{transcript}

–°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ü–†–ê–í–ò–õ–ê:
{algorithm_preview or "–ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏ –≤–µ—Ä–Ω–∏ JSON —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏."""

        return system_prompt, user_prompt
    
    def extract_proposals(self, transcript: str, algorithm_preview: str = None) -> List[Proposal]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞"""
        if not self.client:
            print("‚ùå OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return []
        
        try:
            system_prompt, user_prompt = self._get_prompt(transcript, algorithm_preview)
            
            response = self.client.chat.completions.create(
                model=config.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.3,
                response_format={"type": "json_object"}
            )
            
            content = response.choices[0].message.content
            data = json.loads(content)
            
            proposals = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º
            for item in data.get("by_rule", []):
                proposal = Proposal(
                    call_date=self._get_current_date(),
                    extracted_case=item.get("case", ""),
                    existing_rule_matched=True,
                    suggested_rule_diff="",
                    confidence=item.get("confidence", 0.5),
                    notes=f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª—É: {item.get('rule_type', '')}"
                )
                proposals.append(proposal)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
            for item in data.get("new", []):
                proposal = Proposal(
                    call_date=self._get_current_date(),
                    extracted_case=item.get("case", ""),
                    existing_rule_matched=False,
                    suggested_rule_diff=json.dumps(item.get("suggested_rule", {}), ensure_ascii=False, indent=2),
                    confidence=item.get("confidence", 0.5),
                    notes=item.get("rationale", "")
                )
                proposals.append(proposal)
            
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(proposals)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
            return proposals
            
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: {e}")
            return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
            return []
    
    def _get_current_date(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ"""
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d")
    
    def extract_from_multiple_transcripts(self, transcripts: List[Dict[str, str]], 
                                        algorithm_preview: str = None) -> List[Proposal]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤"""
        all_proposals = []
        
        for transcript_info in transcripts:
            filename = transcript_info.get("filename", "unknown")
            content = transcript_info.get("content", "")
            
            if not content:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª: {filename}")
                continue
            
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {filename}")
            proposals = self.extract_proposals(content, algorithm_preview)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
            for proposal in proposals:
                proposal.notes += f" | –ò—Å—Ç–æ—á–Ω–∏–∫: {filename}"
            
            all_proposals.extend(proposals)
        
        print(f"‚úÖ –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(all_proposals)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ {len(transcripts)} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤")
        return all_proposals


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
llm_extractor = LLMExtractor()

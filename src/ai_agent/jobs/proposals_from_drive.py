"""
Job –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ Google Drive
"""

import sys
import traceback
from typing import List, Dict, Any

from ai_agent.config import config
from ai_agent.google.auth import google_auth
from ai_agent.google.drive import drive
from ai_agent.google.sheets import sheets
from ai_agent.llm.extract import llm_extractor


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ Google Drive...\n")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not config.validate():
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ Calls
        if not config.GOOGLE_DRIVE_CALLS_FOLDER_ID:
            print("‚ùå GOOGLE_DRIVE_CALLS_FOLDER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print("üìù –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É 'Calls' –≤ Google Drive –∏ —É–∫–∞–∂–∏—Ç–µ –µ—ë ID –≤ .env")
            return False
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if not google_auth.authenticate():
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Google API")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
        print("üìÅ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ Calls...")
        transcript_files = drive.get_transcripts_from_calls_folder()
        
        if not transcript_files:
            print("‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(transcript_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        transcripts_data = []
        for file_info in transcript_files:
            content = drive.process_transcript_file(file_info)
            if content:
                transcripts_data.append({
                    "filename": file_info["name"],
                    "content": content,
                    "modified_time": file_info["modifiedTime"]
                })
        
        if not transcripts_data:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–≤—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        print("üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª–≥–æ—Ä–∏—Ç–º–µ...")
        algorithm_data = sheets.read_range("Algorithm", "A2:L1000")
        algorithm_preview = "\n".join([
            f"–ü—Ä–∞–≤–∏–ª–æ {row[0]}: {row[2]} ({row[3]}) ‚Üí {row[5]}"
            for row in algorithm_data if len(row) >= 6
        ])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM
        print("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã —á–µ—Ä–µ–∑ LLM...")
        proposals = llm_extractor.extract_from_multiple_transcripts(
            transcripts_data, 
            algorithm_preview
        )
        
        if not proposals:
            print("‚ÑπÔ∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ Google Sheets
        print("üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –ª–∏—Å—Ç Proposals...")
        
        proposals_rows = []
        for proposal in proposals:
            row = [
                proposal.call_date,
                proposal.extracted_case,
                "Y" if proposal.existing_rule_matched else "N",
                proposal.suggested_rule_diff,
                proposal.confidence,
                proposal.status,
                proposal.notes,
                proposal.rule_id
            ]
            proposals_rows.append(row)
        
        success = sheets.append_rows("Proposals", proposals_rows)
        
        if success:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(proposals)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –ª–∏—Å—Ç Proposals")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            new_proposals = [p for p in proposals if not p.existing_rule_matched]
            existing_proposals = [p for p in proposals if p.existing_rule_matched]
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  - –ù–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(new_proposals)}")
            print(f"  - –ü–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º: {len(existing_proposals)}")
            print(f"  - –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {sum(p.confidence for p in proposals) / len(proposals):.2f}")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ Google Sheets")
            return False
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
        return False


def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å–∞–º"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    
    # –¢–µ—Å—Ç Google API
    if not google_auth.authenticate():
        print("‚ùå Google API: –û—à–∏–±–∫–∞")
        return False
    print("‚úÖ Google API: OK")
    
    # –¢–µ—Å—Ç Google Sheets
    info = sheets.get_spreadsheet_info()
    if info:
        print(f"‚úÖ Google Sheets: OK ({info['title']})")
    else:
        print("‚ùå Google Sheets: –û—à–∏–±–∫–∞")
        return False
    
    # –¢–µ—Å—Ç Google Drive
    if config.GOOGLE_DRIVE_CALLS_FOLDER_ID:
        files = drive.list_files_in_folder(config.GOOGLE_DRIVE_CALLS_FOLDER_ID)
        print(f"‚úÖ Google Drive: OK ({len(files)} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ)")
    else:
        print("‚ö†Ô∏è Google Drive: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –¢–µ—Å—Ç OpenAI
    if llm_extractor.client:
        print("‚úÖ OpenAI: OK")
    else:
        print("‚ùå OpenAI: –û—à–∏–±–∫–∞")
        return False
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
    return True


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ Google Drive")
    parser.add_argument("--test", action="store_true", help="–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
    
    args = parser.parse_args()
    
    if args.test:
        success = test_connection()
    else:
        success = main()
    
    sys.exit(0 if success else 1)

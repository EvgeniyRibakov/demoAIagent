"""
Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
"""

from typing import List, Dict, Any
from googleapiclient.errors import HttpError

from ai_agent.config import config
from ai_agent.google.auth import google_auth


class GoogleDrive:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Drive"""
    
    def __init__(self):
        self.service = None
        
    def _get_service(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å Google Drive"""
        if not self.service:
            self.service = google_auth.get_drive_service()
        return self.service
    
    def list_files_in_folder(self, folder_id: str, file_types: List[str] = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ"""
        try:
            service = self._get_service()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            query = f"'{folder_id}' in parents and trashed = false"
            
            if file_types:
                mime_types = []
                for file_type in file_types:
                    if file_type == 'text':
                        mime_types.extend([
                            "mimeType='text/plain'",
                            "mimeType='application/json'"
                        ])
                    elif file_type == 'docs':
                        mime_types.append("mimeType='application/vnd.google-apps.document'")
                
                if mime_types:
                    query += f" and ({' or '.join(mime_types)})"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            results = service.files().list(
                q=query,
                fields="files(id,name,mimeType,modifiedTime,createdTime)",
                orderBy="modifiedTime desc"
            ).execute()
            
            files = results.get('files', [])
            
            return [{
                'id': file.get('id'),
                'name': file.get('name'),
                'mimeType': file.get('mimeType'),
                'modifiedTime': file.get('modifiedTime'),
                'createdTime': file.get('createdTime')
            } for file in files]
            
        except HttpError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            return []
    
    def download_file_content(self, file_id: str, mime_type: str = None) -> str:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"""
        try:
            service = self._get_service()
            
            # –î–ª—è Google Docs —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            if mime_type == 'application/vnd.google-apps.document':
                content = service.files().export(
                    fileId=file_id,
                    mimeType='text/plain'
                ).execute()
                return content.decode('utf-8')
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–∫–∞—á–∏–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
                content = service.files().get_media(fileId=file_id).execute()
                return content.decode('utf-8')
                
        except HttpError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}: {e}")
            return ""
    
    def get_transcripts_from_calls_folder(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ Calls"""
        if not config.GOOGLE_DRIVE_CALLS_FOLDER_ID:
            print("‚ùå GOOGLE_DRIVE_CALLS_FOLDER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
        files = self.list_files_in_folder(
            config.GOOGLE_DRIVE_CALLS_FOLDER_ID,
            file_types=['text', 'docs']
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        from datetime import datetime, timedelta
        cutoff_date = datetime.now() - timedelta(days=7)
        
        recent_files = []
        for file in files:
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                mod_time = datetime.fromisoformat(
                    file['modifiedTime'].replace('Z', '+00:00')
                )
                
                if mod_time.replace(tzinfo=None) > cutoff_date:
                    recent_files.append(file)
            except (ValueError, TypeError):
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –≤–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª
                recent_files.append(file)
        
        return recent_files
    
    def process_transcript_file(self, file_info: Dict[str, Any]) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
        print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_info['name']}")
        
        content = self.download_file_content(
            file_info['id'],
            file_info['mimeType']
        )
        
        if not content:
            print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª: {file_info['name']}")
            return ""
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        content = content.strip()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {file_info['name']}")
        return content


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
drive = GoogleDrive()
